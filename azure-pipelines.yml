# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net


# Basic build def. No Nuget packing yet


trigger:
- master
- develop


pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: 'Xbim.Exchange.Nuget.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  major: 5
  minor: 0
  buildNo: $[counter('exchangeversioncounter', 100)]

name: $(BuildDefinitionName)_$(SourceBranchName)_$(buildNo)

steps:
# Windows script setting up $(packageversion) of the nuget package if this is development branch build
- script: |
    echo ##vso[task.setvariable variable=packageversion]$(major).$(minor).$(buildNo)-prerelease
  name: 'SettingPrereleaseNugetPackageVersion'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
- script: | 
    echo ##vso[task.setvariable variable=packageversion]$(major).$(minor).$(buildNo)
  name: 'SettingNugetPackageVersion'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

# Windows script setting up $(fileversion) used to stamp AssemblyFileVersions. 
# By convention we use 'Major.Minor.BuildNo.0' on Master and 'Major.Minor.0.BuildNo' on other branches
- script: | 
    echo ##vso[task.setvariable variable=fileversion]$(major).$(minor).$(buildNo).0
  name: 'SettingFileVersionMaster'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
- script: | 
    echo ##vso[task.setvariable variable=fileversion]$(major).$(minor).0.$(buildNo)
  name: 'SettingFileVersionNonMaster'
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

- template: buildversions.yml   # invoke a sub task
  parameters:
    fileversion: $(fileversion)
    packageversion: $(packageversion)

- task: NuGetToolInstaller@0

- task: NuGetCommand@2
  displayName: 'NuGet restore Solution $(packageversion)'
  inputs:
    restoreSolution: '$(solution)'
    verbosityRestore: 'normal'
    feedsToUse: config
    nugetConfigPath: nuget.config

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

#- task: VSTest@2
#  inputs:
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'
  

- script: nuget sources add -Name local -Source $(Build.BinariesDirectory)
  name: 'SetNugetSource'

# Pack COBie/COBieLite/COBieLiteUK & DPoW (which have no internal project references)
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/file-matching-patterns?view=vsts
- template: buildnuget.yml 
  parameters:
    packagesToPack: 'Xbim.@(COBie|COBieLite|COBieLiteUK|DPoW)/Xbim.@(COBie|COBieLite|COBieLiteUK|DPoW).csproj'
    packageversion: $(packageversion)


# Re-reference & Pack Xbim.CobieLiteUK.Validation against COBieLiteUK
- script: dotnet remove Xbim.CobieLiteUK.Validation\Xbim.CobieLiteUK.Validation.csproj reference ..\Xbim.COBieLiteUK\Xbim.COBieLiteUK.csproj
- script: dotnet add    Xbim.CobieLiteUK.Validation\Xbim.CobieLiteUK.Validation.csproj package Xbim.COBieLiteUK -s $(Build.BinariesDirectory) -v $(packageversion)
  name: 'COBieLiteUK_Validation_Patch'

# Re-reference & Pack Xbim.Exchanger against DPoW and COBieLite[UK]
- script: dotnet remove Xbim.Exchanger\Xbim.Exchanger.csproj reference ..\Xbim.COBieLite\Xbim.COBieLite.csproj ..\Xbim.COBieLiteUK\Xbim.COBieLiteUK.csproj ..\Xbim.DPoW\Xbim.DPoW.csproj
- script: dotnet add    Xbim.Exchanger\Xbim.Exchanger.csproj package Xbim.COBieLite Xbim.COBieLiteUK Xbim.DPoW -s $(Build.BinariesDirectory) -v $(packageversion)
  name: 'COBieExchanger_Patch'

- template: buildnuget.yml 
  parameters:
    packagesToPack: 'Xbim.@(CobieLiteUK.Validation|Exchanger)\Xbim.@(CobieLiteUK.Validation|Exchanger).csproj'
    packageversion: $(packageversion)

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\*.nupkg'
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()